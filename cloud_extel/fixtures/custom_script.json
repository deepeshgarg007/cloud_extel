[
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Company",
  "modified": "2020-05-15 21:17:16.200853",
  "name": "Company-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Company', {\n\trefresh(frm) {\n\t\tfrm.set_query(\"tds_account\", \"accounts\", function(doc) {\n        \treturn {\n        \t\tfilters: {'company': frm.doc.name}\n        \t}\n        });\n\t}\n})"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Sales Invoice",
  "modified": "2020-06-05 18:43:13.100706",
  "name": "Sales Invoice-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        frm.set_query('city', function() {\n            return {\n                filters: {\n                    'gst_state': frm.doc.territory\n                }\n            }\n        })\n        \n        frm.set_query('telecom_region', function() {\n            return {\n                filters: {\n                    'gst_state': frm.doc.territory\n                }\n            }\n        })\n        \n        if (frm.doc.docstatus == 1 && frm.doc.outstanding_amount !== 0) {\n\t\t    frm.add_custom_button(__('Payment with TDS'), function() {\n\t\t        frappe.call({\n\t\t            'method': 'erpnext.accounts.doctype.payment_entry.payment_entry.get_payment_entry',\n\t\t            'args': {\n\t\t                'dt': frm.doc.doctype,\n\t\t                'dn': frm.doc.name\n\t\t            },\n\t\t            'callback': function(r) {\n\t\t                var doclist = frappe.model.sync(r.message);\n\t\t                frappe.db.get_value('Company', frm.doc.company, ['gross_tds_account', 'cost_center'], function (value) {\n\t\t                    let tds_amount = flt(frm.doc.net_total * 10)/100;\n\t\t                    doclist[0].paid_amount = frm.doc.net_total - tds_amount;\n    \t\t                doclist[0].received_amount = frm.doc.net_total - tds_amount;\n    \t\t                var d = frappe.model.add_child(doclist[0], 'Payment Entry Deduction', 'deductions');\n    \t\t                d.account = value.gross_tds_account;\n    \t\t                d.cost_center = value.cost_center;\n    \t\t                d.amount = tds_amount;\n    \t\t                refresh_fields('deductions');\n\t\t                });\n\t\t                \n\t\t                frappe.set_route(\"Form\", doclist[0].doctype, doclist[0].name);\n\t\t            } \n\t\t        });\n\t\t    });\n\t\t}    \n    },\n    \n\tcustomer: function(frm) {\n\t\tfrm.trigger('fetch_details');\n\t},\n\t\n\tterritory: function(frm) {\n\t    frm.trigger('fetch_details');\n\t},\n\n\tcost_center: function(frm) {\n\t    frm.trigger('fetch_details');\n\t},\n\t\n\tfetch_details: function(frm) {\n\t    if (!frm.doc.customer || !frm.doc.territory || !frm.doc.cost_center) {\n\t        return;\n\t    }\n\t    \n\t    frappe.call({\n\t\t\tmethod: 'get_income_accounts',\n\t\t\targs: {\n\t\t\t\t'customer': frm.doc.customer,\n\t\t\t\t'telecom_circle': frm.doc.telecom_circle,\n\t\t\t\t'cost_center': frm.doc.cost_center\n\t\t\t},\n\t\t\tcallback: function(r) {\n\t\t\t\tif(r.message) {\n\n\t\t\t\t    if (r.message['accounts']) {\n\t\t\t\t       frm.set_query('income_account', 'items', function() {\n    \t\t\t\t        return {\n    \t\t\t\t            filters: {\n    \t\t\t\t                'name': ['in', r.message['accounts']]\n    \t\t\t\t            }\n    \t\t\t\t        }\n\t\t\t\t        }); \n\t\t\t        }\n\t\t\t        \n\t\t\t        if (r.message['address']) {\n\t\t\t            frm.set_value('customer_address', r.message['address']);\n\t\t\t        }\n\t\t\t        \n\t\t\t        if (r.message['contact_person']) {\n\t\t\t            frm.set_value('contact_person', r.message['contact_person'])\n\t\t\t        }\n\t\t\t\t}\n\t\t\t}\n\t\t});   \n\t},\n\t\n\tcustomer_address: function(frm) {\n\t    if (frm.doc.customer_address) {\n\t        frappe.db.get_value('Address', frm.doc.customer_address, 'telecom_region', function(value) {\n\t            if (value) {\n\t                frm.set_value('telecom_region', value.telecom_region);\n\t            }\n\t        })\n\t        \n\t    }\n\t}\n})"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Purchase Order",
  "modified": "2020-06-08 14:30:16.727505",
  "name": "Purchase Order-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Purchase Order', {\n    \n    onload: function(frm) {\n        if (frm.doc.docstatus === 0) {\n            frm.trigger('purchase_order_type');   \n        }\n    },\n    \n    refresh: function(frm) {\n        if (frm.doc.docstatus === 0) {\n            frm.trigger('purchase_order_type');   \n        }\n    },\n    \n\tpurchase_order_type: function (frm, cdt,cdn) {\n\t    let rate = frappe.meta.get_docfield(\"Purchase Order Item\", \"rate\", frm.doc.name);\n\t    let qty = frappe.meta.get_docfield(\"Purchase Order Item\", \"qty\", frm.doc.name);\n\t    let months = frappe.meta.get_docfield(\"Purchase Order Item\", \"months\", frm.doc.name);\n\t    let site = frappe.meta.get_docfield(\"Purchase Order Item\", \"site\", frm.doc.name);\n\t    \n\t    if (frm.doc.purchase_order_type == 'Value Based') {\n            rate.read_only = 1;\n\t    } else {\n\t        rate.read_only = 0;\n\t    }\n\t    \n\t    if (frm.doc.purchase_order_type == 'Quantity Based') {\n\t       qty.read_only = 1;\n\t       months.read_only = 0;\n\t       site.read_only = 0;\n\t    } else {\n\t        qty.read_only = 0;\n\t        months.read_only = 1;\n            site.read_only = 1;\n\t    }\n\t    \n        frm.refresh_field('items');\n\t},\n\t\n\tbefore_save: function(frm) {\n\t    if (frm.doc.purchase_order_type == 'Quantity Based') {\n    \t    $.each(frm.doc.items || [], function(i, item) {\n    \t      if (!item.qty) {\n    \t          item.qty = item.months;\n    \t      }  \n    \t    });\n\t    }\n\t}\n});\n\n\nfrappe.ui.form.on('Purchase Order Item', {\n\tmonths: function(frm, cdt, cdn) {\n\t    let row = locals[cdt][cdn];\n\t    row.qty = cint(row.months) * cint(row.site);\n\t    frm.refresh_field('items');\n\t},\n\t\n\tsite: function(frm, cdt, cdn) {\n\t    let row = locals[cdt][cdn];\n\t    row.qty = cint(row.months) * cint(row.site);\n\t    frm.refresh_field('items');\n\t}\n})"
 }
]